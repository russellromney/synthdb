name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        uv sync --all-extras
    
    - name: Lint with ruff
      run: |
        uv run ruff check synthdb/
    
    - name: Type check with mypy
      run: |
        uv run mypy synthdb/
    
    - name: Test with pytest
      run: |
        uv run pytest -v --cov=synthdb --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
    
    - name: Build package
      run: |
        uv build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: synthdb_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: mysql
          MYSQL_DATABASE: synthdb_test
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 3306:3306

    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
    
    - name: Install dependencies with all extras
      run: |
        uv sync --all-extras
    
    - name: Test SQLite backend
      run: |
        uv run python -c "
        import synthdb
        synthdb.make_db('test.db', backend_name='sqlite')
        print('✅ SQLite backend works')
        "
    
    - name: Test PostgreSQL backend
      env:
        PGPASSWORD: postgres
      run: |
        uv run python -c "
        import synthdb
        synthdb.make_db('postgresql://postgres:postgres@localhost:5432/synthdb_test', backend_name='postgresql')
        print('✅ PostgreSQL backend works')
        "
    
    - name: Test MySQL backend
      run: |
        uv run python -c "
        import synthdb
        synthdb.make_db('mysql://root:mysql@localhost:3306/synthdb_test', backend_name='mysql')
        print('✅ MySQL backend works')
        "